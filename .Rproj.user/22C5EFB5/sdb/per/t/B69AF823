{
    "contents" : "# server.R\n\nlibrary(fpp)\n\nshinyServer(\n  \n  function(input, output) {\n    \n    output$ui_1 <- renderUI({\n      if (is.null(input$input_type))\n        return()\n      \n      sliderInput(\"period\", \"Forecasting Period\",\n                  min = 1, max = 10, value = 1)\n      \n    })\n    output$ui_2 <- renderUI({\n      if (is.null(input$input_type))\n        return()\n      \n      switch(input$input_type,\n             \"Moving Average\" = sliderInput(\"interval\", \"Interval\", min = 1, max = 15, value = 4)\n      )\n      \n    })\n    output$ui_3 <- renderUI({\n      if (is.null(input$input_type))\n        return()\n      \n      switch(input$input_type,\n             \"Exponential Smoothing\" = sliderInput(\"alpha\", \"Alpha\", min = 0, max = 1, value = 0.4),\n             \"Halt's Method\" = sliderInput(\"alpha\", \"Alpha\", min = 0, max = 1, value = 0.4),\n             \"Halt Winter's Method\" = sliderInput(\"alpha\", \"Alpha\", min = 0, max = 1, value = 0.4)\n      )\n      \n    })\n    output$ui_4 <- renderUI({\n      if (is.null(input$input_type))\n        return()\n      \n      switch(input$input_type,\n             \"Halt's Method\" = sliderInput(\"beta\", \"Beta\", min = 0, max = 1, value = 0.4),\n             \"Halt Winter's Method\" = sliderInput(\"beta\", \"Beta\", min = 0, max = 1, value = 0.4)\n      )\n      \n    })\n    output$ui_5 <- renderUI({\n      if (is.null(input$input_type))\n        return()\n      \n      switch(input$input_type,\n             \"Halt Winter's Method\" = sliderInput(\"gamma\", \"Gamma\", min = 0, max = 1, value = 0.4)\n      )\n      \n    })\n    \n    output$contents <- renderTable({\n      inFile <- input$file1\n      if (is.null(inFile))\n        return(NULL)\n      \n      x<-read.table(inFile$datapath, header=input$header, sep=input$sep)\n      \n      switch(input$input_type,\n             \"Mean\" = f<-mean_func(x,input,output,input$period),\n             \"Moving Average\" = f<-moving_avg_func(x,input,output,input$period,input$interval),\n             \"Exponential Smoothing\" = f<-ses_func(x,input,output,input$period,input$alpha),\n             \"Halt's Method\" = f<-halts_func(x,input,output,input$period,input$alpha,input$beta),\n             \"Halt Winter's Method\" = f<-halt_winters_func(x,input,output,input$period,input$alpha,input$beta,input$gamma),\n             \"Simple Regression\" = f<-simple_regr_func(x,input,output,input$period)\n      )\n      row<-dim(x)[1]\n      FORECAST<-f[1:row]\n      x<- cbind(x,FORECAST)\n      x\n    })\n  }\n)\n#-----------------------------------------------------------------------------------------------\nmean_func <- function(data,input,output,period){\n  row <- dim(data)[1]\n  \n  ANS <-data$Sales[1]  # first prediction <- first value\n  FORECAST <- ANS\n  \n  FORECAST_PERIOD<- period\n  counter<-1\n  error_curr <- 0\n  error <- 0\n  error_sq <- 0\n  error_abs <- 0\n  error_perc <- 0\n  \n  while(counter<=row) {\n    error_curr <- data$Sales[counter] - ANS;\n    error <- error + error_curr;\n    error_sq <- error_sq + error_curr*error_curr;\n    error_abs <- error_abs + abs(error_curr);\n    error_perc <- error_perc + (error_curr/data$Sales[counter])*100;\n    \n    ANS <- ((counter-1)*ANS + data$Sales[counter])/counter;\n    FORECAST <- c(FORECAST,ANS);\n    counter<-counter+1;\n  }\n  \n  lapply(counter, function(counter) {\n    output[[paste(counter)]] <- renderUI({\n      strong(paste(\"UPCOMING FORECASTS\"))\n    })\n  })\n  \n  # forecasting now :-\n  index<-0\n  while(index<FORECAST_PERIOD) {\n    FORECAST <- c(FORECAST,ANS);\n    lapply(counter+index, function(counter) {\n      output[[paste(counter+1)]] <- renderUI({\n        paste(\"For time: \",counter,\" , Prediction: \",FORECAST[counter],\"\\n\")\n      })\n    })\n    index<-index+1;\n  }\n  \n  # calculate Theil's U-statistic\n  counter <- 1;\n  num <- 0;\n  denom <- 0;\n  while(counter<row) {\n    num <- num +\n      ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;\n    denom <- denom +\n      ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;\n    counter <- counter +1\n  }\n  \n  output$text1 <- renderUI({\n    str1<-paste(\"Mean Error :\",error/row,\"\\n\");\n    str2<-paste(\"Mean Absolute Error :\",error_abs/row,\"\\n\");\n    str3<-paste(\"Mean Square Error :\",error_sq/row,\"\\n\");\n    str4<-paste(\"Mean % Error :\",error_perc/row,\"%\\n\");\n    str5<-paste(\"Theil's U-statistic : \", sqrt(num/denom),\"\\n\");\n    strong(HTML(paste(str1, str2, str3, str4, str5, sep = '<br/>')))\n  })\n  \n  output$dynamicPlot <- renderPlot({\n    plot.ts(data$Sales, xlab=\"TIME\", ylab=\"Sales in Thousands\",xlim=c(1,30))\n    lines(FORECAST,col=\"blue\")\n  })\n  \n  return(FORECAST)\n}\n#-------------------------------------------------------------------------------------------\nmoving_avg_func<- function(data,input,output,period,intervl){\n  row <- dim(data)[1]\n  interval <- intervl\n  FORECAST<-NULL\n  FORECAST_PERIOD<- period\n  counter<-1\n  while(counter<=interval) { # first interval forecast = 0\n    FORECAST <- c(FORECAST,0);  \n    counter <- counter+1;\n  }\n  error_curr <- 0\n  error <- 0\n  error_sq <- 0\n  error_abs <- 0\n  error_perc <- 0\n  \n  while(counter<=row) {\n    ANS<-0\n    inner_counter <- counter-interval;\n    \n    while(inner_counter<counter){\n      ANS<-ANS+data$Sales[inner_counter];\n      inner_counter<- inner_counter+1;\n    }\n    ANS<-ANS/interval\n    error_curr <- data$Sales[counter] - ANS;\n    error <- error + error_curr;\n    error_sq <- error_sq + error_curr*error_curr;\n    error_abs <- error_abs + abs(error_curr); \n    error_perc <- error_perc + (error_curr/data$Sales[counter])*100;\n    FORECAST <- c(FORECAST,ANS);\n    counter<-counter+1; \n  }\n  \n  lapply(counter, function(counter) {\n    output[[paste(counter)]] <- renderUI({\n      strong(paste(\"UPCOMING FORECASTS\"))\n    })\n  })\n  \n  # forecasting now :-\n  ANS<-0\n  inner_counter <- counter-interval;\n  while(inner_counter<counter){\n    ANS<-ANS+data$Sales[inner_counter];\n    inner_counter<- inner_counter+1;\n  }\n  ANS<-ANS/interval\n  index<-0\n  while(index<FORECAST_PERIOD) {\n    FORECAST <- c(FORECAST,ANS);\n    lapply(counter+index, function(counter) {\n      output[[paste(counter+1)]] <- renderUI({\n        paste(\"For time: \",counter,\" , Prediction: \",FORECAST[counter],\"\\n\")\n      })\n    })\n    index<-index+1;\n  }\n  \n  # calculate Theil's U-statistic\n  counter <- interval+1;\n  num <- 0;\n  denom <- 0;\n  while(counter<row) {\n    num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;\n    denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;\n    counter <- counter +1\n  }\n  \n  # printing the errors\n  output$text1 <- renderUI({\n    str1<-paste(\"Mean Error :\",error/row,\"\\n\");\n    str2<-paste(\"Mean Absolute Error :\",error_abs/row,\"\\n\");\n    str3<-paste(\"Mean Square Error :\",error_sq/row,\"\\n\");\n    str4<-paste(\"Mean % Error :\",error_perc/row,\"%\\n\");\n    str5<-paste(\"Theil's U-statistic : \", sqrt(num/denom),\"\\n\");\n    strong(HTML(paste(str1, str2, str3, str4, str5, sep = '<br/>')))\n  })\n  \n  output$dynamicPlot <- renderPlot({\n    plot.ts(data$Sales, xlab=\"TIME\", ylab=\"Sales in Thousands\",xlim=c(1,30))\n    lines(FORECAST,col=\"blue\")\n  })\n  \n  return(FORECAST)  \n}\n#-----------------------------------------------------------------------------------------\nses_func<- function(data,input,output,period,alp){\n  row <- dim(data)[1]\n  \n  alpha <- alp\n  NO_PRED <- period\n  \n  FORECAST<-0  # first observation is NULL\n  FORECAST<-c(FORECAST,data$Sales[1]) # 2nd observation is initialied as 1st\n  counter<-2\n  \n  error_curr <- 0\n  error <- 0\n  error_sq <- 0\n  error_abs <- 0\n  error_perc <- 0\n  \n  while(counter<=row) {\n    error_curr <- data$Sales[counter] - FORECAST[counter];\n    error <- error + error_curr;\n    error_sq <- error_sq + error_curr*error_curr;\n    error_abs <- error_abs + abs(error_curr); \n    error_perc <- error_perc + (error_curr/data$Sales[counter])*100;\n    \n    FORECAST_NEXT<-alpha*data$Sales[counter]+(1-alpha)*FORECAST[counter]\n    FORECAST <- c(FORECAST,FORECAST_NEXT);\n    counter<-counter+1; \n  }\n  \n  lapply(counter, function(counter) {\n    output[[paste(counter)]] <- renderUI({\n      strong(paste(\"UPCOMING FORECASTS\"))\n    })\n  })\n  \n  # Now predicting \n  index<-1\n  while(index<=NO_PRED){\n    \n    lapply(row+index, function(counter) {\n      output[[paste(counter+1)]] <- renderUI({\n        paste(\"For time: \",counter,\" , Prediction: \",FORECAST[row+index],\"\\n\")\n      })\n    })\n    \n    FORECAST <- c(FORECAST,FORECAST[row+index]);\n    index<- index+1;\n  }\n  \n  # calculate Theil's U-statistic\n  \n  counter <- NO_PRED+1;\n  num <- 0;\n  denom <- 0;\n  while(counter<row) {\n    num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;\n    denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;\n    counter <- counter +1\n  }\n  \n  # printing the errors\n  output$text1 <- renderUI({\n    str1<-paste(\"Mean Error :\",error/row,\"\\n\");\n    str2<-paste(\"Mean Absolute Error :\",error_abs/row,\"\\n\");\n    str3<-paste(\"Mean Square Error :\",error_sq/row,\"\\n\");\n    str4<-paste(\"Mean % Error :\",error_perc/row,\"%\\n\");\n    str5<-paste(\"Theil's U-statistic : \", sqrt(num/denom),\"\\n\");\n    strong(HTML(paste(str1, str2, str3, str4, str5, sep = '<br/>')))\n  })\n  \n  output$dynamicPlot <- renderPlot({\n    plot.ts(data$Sales, xlab=\"TIME\", ylab=\"Sales in Thousands\",xlim=c(1,30))\n    lines(FORECAST,col=\"blue\")\n  })\n  \n  return(FORECAST)  \n}\n#-------------------------------------------------------------------------------------------\nhalts_func<- function(data,input,output,period,alp,bet){\n  row <- dim(data)[1]\n  \n  alpha <- alp\n  beta <- bet\n  NO_PRED <- period\n  \n  FORECAST<-0  # first observation is NULL\n  \n  LEVEL<-data$Sales[1] #L1 = Y1\n  \n  if(beta==0) {\n    TREND <- 0\n  } else {\n    TREND <-data$Sales[2]-data$Sales[1] #b1 = Y2-Y1\n  }\n  \n  \n  counter<-2\n  \n  error_curr <- 0\n  error <- 0\n  error_sq <- 0\n  error_abs <- 0\n  error_perc <- 0\n  \n  while(counter<=row) {\n    \n    FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*1;\n    FORECAST <- c(FORECAST,FORECAST_NEXT);\n    \n    error_curr <- data$Sales[counter] - FORECAST[counter];\n    error <- error + error_curr;\n    error_sq <- error_sq + error_curr*error_curr;\n    error_abs <- error_abs + abs(error_curr); \n    error_perc <- error_perc + (error_curr/data$Sales[counter])*100;\n    \n    LEVEL_NEW <- alpha*data$Sales[counter]+(1-alpha)*(LEVEL[counter-1]+TREND[counter-1]);\n    LEVEL<-c(LEVEL, LEVEL_NEW)\n    \n    TREND_NEW <- beta*(LEVEL[counter]-LEVEL[counter-1])+(1-beta)*TREND[counter-1]\n    TREND<-c(TREND,TREND_NEW)\n    \n    counter<-counter+1; \n  }\n  \n  lapply(counter, function(counter) {\n    output[[paste(counter)]] <- renderUI({\n      strong(paste(\"UPCOMING FORECASTS\"))\n    })\n  })\n  \n  # Now predicting \n  index <- 1\n  while(index<=NO_PRED){\n    FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*index;\n    FORECAST <- c(FORECAST,FORECAST_NEXT);\n    \n    lapply(row+index, function(counter) {\n      output[[paste(counter+1)]] <- renderUI({\n        paste(\"For time: \",counter,\" , Prediction: \",FORECAST[counter],\"\\n\")\n      })\n    })\n    \n    index <- index+1\n  }\n  \n  # calculate Theil's U-statistic\n  \n  counter <- NO_PRED+1;\n  num <- 0;\n  denom <- 0;\n  \n  while(counter<row) {\n    num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;\n    denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;\n    counter <- counter +1\n  }\n  \n  # printing the errors\n  output$text1 <- renderUI({\n    str1<-paste(\"Mean Error :\",error/row,\"\\n\");\n    str2<-paste(\"Mean Absolute Error :\",error_abs/row,\"\\n\");\n    str3<-paste(\"Mean Square Error :\",error_sq/row,\"\\n\");\n    str4<-paste(\"Mean % Error :\",error_perc/row,\"%\\n\");\n    str5<-paste(\"Theil's U-statistic : \", sqrt(num/denom),\"\\n\");\n    strong(HTML(paste(str1, str2, str3, str4, str5, sep = '<br/>')))\n  })\n  \n  output$dynamicPlot <- renderPlot({\n    plot.ts(data$Sales, xlab=\"TIME\", ylab=\"Sales in Thousands\",xlim=c(1,30))\n    lines(FORECAST,col=\"blue\")\n  })\n  \n  return(FORECAST)  \n}\n#------------------------------------------------------------------------------------------\nhalt_winters_func<- function(data,input,output,period,alp,bet,gama){\n  row <- dim(data)[1]\n  \n  alpha <- alp\n  beta <- bet\n  gamma <- gama\n  \n  NO_PRED <- period\n  season <- 4\n  \n  index<-1\n  FORECAST<-NULL\n  LEVEL<-NULL\n  TREND<-NULL\n  SEASN<-NULL\n  SUM<-0\n  while(index<=season){\n    FORECAST<-c(FORECAST,0);  # first season observation is NULL\n    LEVEL<-c(LEVEL,0);\n    TREND<-c(TREND,0);\n    SUM<-SUM+data$Sales[index];\n    index<-index+1;\n  }\n  LEVEL[season]<-SUM/season  #Ls = summ(Yi)/s\n  \n  index<-1\n  temp<-0\n  while(index<=season){\n    temp<-temp+(data$Sales[season+index]-data$Sales[index])/season;\n    index<-index+1;\n  }\n  TREND[season]<-temp/season #bs = 1/s[(Ys+1 - Y1)/s + ... + (Ys+s - Ys)/s]\n  index<-1\n  while(index<=season){\n    SEASN<-c(SEASN,data$Sales[index]/LEVEL[season]);\n    index<-index+1;\n  }\n  \n  counter<-season+1\n  \n  error_curr <- 0\n  error <- 0\n  error_sq <- 0\n  error_abs <- 0\n  error_perc <- 0\n  \n  while(counter<=row) {\n    \n    FORECAST_NEXT<-(LEVEL[counter-1]+TREND[counter-1]*1)*SEASN[counter-season];\n    FORECAST <- c(FORECAST,FORECAST_NEXT);\n    \n    error_curr <- data$Sales[counter] - FORECAST[counter];\n    error <- error + error_curr;\n    error_sq <- error_sq + error_curr*error_curr;\n    error_abs <- error_abs + abs(error_curr); \n    error_perc <- error_perc + (error_curr/data$Sales[counter])*100;\n    \n    LEVEL_NEW <- alpha*(data$Sales[counter]/SEASN[counter-season])+(1-alpha)*(LEVEL[counter-1]+TREND[counter-1]);\n    LEVEL<-c(LEVEL, LEVEL_NEW);\n    \n    TREND_NEW <- beta*(LEVEL[counter]-LEVEL[counter-1])+(1-beta)*TREND[counter-1];\n    TREND<-c(TREND,TREND_NEW);\n    \n    SEASN_NEW<- gamma*(data$Sales[counter]/LEVEL[counter])+(1-gamma)*SEASN[counter-season];\n    SEASN<-c(SEASN,SEASN_NEW);\n    \n    counter<-counter+1; \n  }\n  \n  lapply(counter, function(counter) {\n    output[[paste(counter)]] <- renderUI({\n      strong(paste(\"UPCOMING FORECASTS\"))\n    })\n  })\n  \n  # Now predicting \n  index <- 1\n  index2<- 1\n  while(index<=NO_PRED){\n    FORECAST_NEXT<-(LEVEL[counter-1]+TREND[counter-1]*index)*SEASN[counter-1+index2-season];\n    FORECAST <- c(FORECAST,FORECAST_NEXT);\n    lapply(row+index, function(counter) {\n      output[[paste(counter+1)]] <- renderUI({\n        paste(\"For time: \",counter,\" , Prediction: \",FORECAST[counter],\"\\n\")\n      })\n    })\n    index <- index+1\n    index2 <- index2+1\n    if(index2>season) {index2=1;}\n  }\n  \n  # calculate Theil's U-statistic\n  \n  counter <- NO_PRED+1;\n  num <- 0;\n  denom <- 0;\n  \n  while(counter<row) {\n    num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;\n    denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;\n    counter <- counter +1\n  }\n  \n  # printing the errors\n  output$text1 <- renderUI({\n    str1<-paste(\"Mean Error :\",error/row,\"\\n\");\n    str2<-paste(\"Mean Absolute Error :\",error_abs/row,\"\\n\");\n    str3<-paste(\"Mean Square Error :\",error_sq/row,\"\\n\");\n    str4<-paste(\"Mean % Error :\",error_perc/row,\"%\\n\");\n    str5<-paste(\"Theil's U-statistic : \", sqrt(num/denom),\"\\n\");\n    strong(HTML(paste(str1, str2, str3, str4, str5, sep = '<br/>')))\n  })\n  \n  output$dynamicPlot <- renderPlot({\n    plot.ts(data$Sales, xlab=\"TIME\", ylab=\"Sales in Thousands\",xlim=c(1,30))\n    lines(FORECAST,col=\"blue\")\n  })\n  \n  return(FORECAST)  \n}\n#--------------------------------------------------------------------------------------------\nsimple_regr_func<- function(data,input,output,per){\n \n  row <- dim(data)[1]\n  period=per\n  \n  # Y = bX+a\n  \n  y_sum <- 0  # sales is y-axis\n  x_sum <- 0   # time is x-axis\n  counter<-1\n  while(counter<=row) {\n    y_sum <- y_sum+data$Sales[counter];\n    x_sum <- x_sum+counter;\n    counter<-counter+1; \n  }\n  y_mean <- y_sum/row\n  x_mean <- x_sum/row\n  \n  # finding 'b'\n  num<-0\n  denom<-0\n  counter<-1\n  while(counter<=row) {\n    num<-num+(counter-x_mean)*(data$Sales[counter]-y_mean)\n    denom<-denom+(counter-x_mean)*(counter-x_mean)\n    counter<-counter+1; \n  }\n  b<-num/denom\n  a<-y_mean-b*x_mean\n  \n  FORECAST <- NULL\n  counter<-1\n  error_curr <- 0\n  error <- 0\n  error_sq <- 0\n  error_abs <- 0\n  error_perc <- 0\n  num<-0\n  denom<-0\n  while(counter<=row) {\n    ANS <- b*counter+a;\n    FORECAST <- c(FORECAST,ANS);\n    \n    error_curr <- data$Sales[counter] - ANS;\n    error <- error + error_curr;\n    error_sq <- error_sq + error_curr*error_curr;\n    error_abs <- error_abs + abs(error_curr); \n    error_perc <- error_perc + (error_curr/data$Sales[counter])*100;\n    \n    num<-num+(FORECAST[counter]-y_mean)**2;\n    denom<-denom+(data$Sales[counter]-y_mean)**2;\n    counter<-counter+1; \n  }\n  \n  R_Sq<-num/denom\n  \n  lapply(counter, function(counter) {\n    output[[paste(counter)]] <- renderUI({\n      strong(paste(\"UPCOMING FORECASTS\"))\n    })\n  })\n  \n  index<- 1\n  while(index<=period) {\n    ANS <- b*counter+a;\n    FORECAST <- c(FORECAST,ANS);\n    lapply(counter, function(counter) {\n      output[[paste(counter+1)]] <- renderUI({\n        paste(\"For time: \",counter,\" , Prediction: \",FORECAST[counter],\"\\n\")\n      })\n    })\n    counter<-counter+1\n    index<-index+1\n  }\n  \n  # calculate Theil's U-statistic\n  counter <- 1;\n  num <- 0;\n  denom <- 0;\n  \n  while(counter<row) {\n    num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;\n    denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;\n    counter <- counter +1\n  }\n  \n  # printing the errors\n  output$text1 <- renderUI({\n    str0<-paste(\"Equation : Sales = \",round(b,2),\"*time + \",round(a,2),\"\\n\");\n    str01<-paste(\"This line fits the data with :\",round(R_Sq*100,2),\"% accuracy\");\n    str1<-paste(\"Mean Error :\",error/row,\"\\n\");\n    str2<-paste(\"Mean Absolute Error :\",error_abs/row,\"\\n\");\n    str3<-paste(\"Mean Square Error :\",error_sq/row,\"\\n\");\n    str4<-paste(\"Mean % Error :\",error_perc/row,\"%\\n\");\n    str5<-paste(\"Theil's U-statistic : \", sqrt(num/denom),\"\\n\");\n    strong(HTML(paste(str0, str01, str1, str2, str3, str4, str5, sep = '<br/>')))\n  })\n  \n  output$dynamicPlot <- renderPlot({\n    plot(data$Sales, xlab=\"TIME\", ylab=\"Sales in Thousands\",xlim=c(1,30))\n    lines(FORECAST,col=\"blue\")\n  })\n  return(FORECAST) \n}",
    "created" : 1457465433027.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3471619036",
    "id" : "B69AF823",
    "lastKnownWriteTime" : 1457635311,
    "path" : "~/R/mini-project_testing/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}