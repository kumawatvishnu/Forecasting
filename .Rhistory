# calculate Theil's U-statistic
counter <- 1;
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n");
counter<-counter+1
counter
library(fpp)
data <- read.table("C:\\Users\\PRATIK GAUTAM\\Desktop\\Sales.txt",header
= T,sep = "\t")
row <- dim(data)[1]
period=5
# Y = bX+a
y_sum <- 0  # sales is y-axis
x_sum <- 0   # time is x-axis
counter<-1
while(counter<=row) {
y_sum <- y_sum+data$Sales[counter];
x_sum <- x_sum+counter;
counter<-counter+1;
}
y_mean <- y_sum/row
x_mean <- x_sum/row
# finding 'b'
num<-0
denom<-0
counter<-1
while(counter<=row) {
num<-num+(counter-x_mean)*(data$Sales[counter]-y_mean)
denom<-denom+(counter-x_mean)*(counter-x_mean)
counter<-counter+1;
}
b<-num/denom
a<-y_mean-b*x_mean
cat(a,b);
FORECAST <- NULL
counter<-1
error_curr <- 0
error <- 0
error_sq <- 0
error_abs <- 0
error_perc <- 0
while(counter<=row) {
ANS <- b*counter+a;
FORECAST <- c(FORECAST,ANS);
cat("For time:",counter,"actual:",data$Sales[counter],"predicated:",ANS,"\n");
error_curr <- data$Sales[counter] - ANS;
error <- error + error_curr;
error_sq <- error_sq + error_curr*error_curr;
error_abs <- error_abs + abs(error_curr);
error_perc <- error_perc + (error_curr/data$Sales[counter])*100;
counter<-counter+1;
}
index<- 1
while(index<=period) {
ANS <- b*counter+a;
FORECAST <- c(FORECAST,ANS);
cat("For time:",counter,"predication:",ANS,"\n");
counter<-counter+1
index<-index+1
}
plot.ts(data$Sales)
lines(FORECAST,col="blue")
cat("Predicated value for t=",row+1,":",FORECAST[row+1],"\n");
cat("Mean Error :",error/row,"\n");
cat("Mean Absolute Error :",error_abs/row,"\n");
cat("Mean Square Error :",error_sq/row,"\n");
cat("Mean % Error :",error_perc/row,"%\n");
# calculate Theil's U-statistic
counter <- 1;
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n");
runApp("~/R/mini-project_testing")
abline(data$Sales)
fit<-lm(data$Sales)
data
fit<-lm(data$Period, data$Sales)
fit<-lm(data$Period, data=data$Sales)
plot(data$Sales)
plot(data$Sales ,data=data$Period)
plot(data$Sales ,data=data$Sales)
abline(data$Sales)
abline(lm(data$Sales))
abline(lm(data$Sales~data$Period))
x<-lm(data$Sales~data$Period)
summary(x)
runApp("~/R/mini-project_testing")
library(fpp)
data <- read.table("C:\\Users\\PRATIK GAUTAM\\Desktop\\Sales.txt",header
= T,sep = "\t")
row <- dim(data)[1]
period=5
# Y = bX+a
y_sum <- 0  # sales is y-axis
x_sum <- 0   # time is x-axis
counter<-1
while(counter<=row) {
y_sum <- y_sum+data$Sales[counter];
x_sum <- x_sum+counter;
counter<-counter+1;
}
y_mean <- y_sum/row
x_mean <- x_sum/row
# finding 'b'
num<-0
denom<-0
counter<-1
while(counter<=row) {
num<-num+(counter-x_mean)*(data$Sales[counter]-y_mean)
denom<-denom+(counter-x_mean)*(counter-x_mean)
counter<-counter+1;
}
b<-num/denom
a<-y_mean-b*x_mean
cat(a,b);
FORECAST <- NULL
counter<-1
error_curr <- 0
error <- 0
error_sq <- 0
error_abs <- 0
error_perc <- 0
while(counter<=row) {
ANS <- b*counter+a;
FORECAST <- c(FORECAST,ANS);
cat("For time:",counter,"actual:",data$Sales[counter],"predicated:",ANS,"\n");
error_curr <- data$Sales[counter] - ANS;
error <- error + error_curr;
error_sq <- error_sq + error_curr*error_curr;
error_abs <- error_abs + abs(error_curr);
error_perc <- error_perc + (error_curr/data$Sales[counter])*100;
counter<-counter+1;
}
index<- 1
while(index<=period) {
ANS <- b*counter+a;
FORECAST <- c(FORECAST,ANS);
cat("For time:",counter,"predication:",ANS,"\n");
counter<-counter+1
index<-index+1
}
plot.ts(data$Sales)
lines(FORECAST,col="blue")
cat("Predicated value for t=",row+1,":",FORECAST[row+1],"\n");
cat("Mean Error :",error/row,"\n");
cat("Mean Absolute Error :",error_abs/row,"\n");
cat("Mean Square Error :",error_sq/row,"\n");
cat("Mean % Error :",error_perc/row,"%\n");
# calculate Theil's U-statistic
counter <- 1;
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n");
runApp("~/R/mini-project_testing")
runApp("~/R/mini-project_testing")
# Copyright (c) 2012,2015  Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# install.packages('ggplot2')
library(ggplot2)
# install.packages('scales')
library(scales)
# install.packages('doBy')
library(doBy)
#########################
# Rate trace processing #
#########################
data = read.table("rate-trace.txt", header=T)
data$Node = factor(data$Node)
data$FaceId <- factor(data$FaceId)
data$Kilobits <- data$Kilobytes * 8
data$Type = factor(data$Type)
# exlude irrelevant types
data = subset(data, Type %in% c("InInterests", "OutInterests", "InData", "OutData"))
# combine stats from all faces
data.combined = summaryBy(. ~ Time + Node + Type, data=data, FUN=sum)
data.root = subset (data.combined, Node == "root")
data.leaves = subset(data.combined, Node %in% c("leaf-1", "leaf-2", "leaf-3", "leaf-4"))
# graph rates on all nodes in Kilobits
g.all <- ggplot(data.combined) +
geom_point(aes (x=Time, y=Kilobits.sum, color=Type), size=1) +
ylab("Rate [Kbits/s]") +
facet_wrap(~ Node)
print(g.all)
# graph rates on the root nodes in Packets
g.root <- ggplot(data.root) +
geom_point(aes (x=Time, y=Kilobits.sum, color=Type), size=2) +
geom_line(aes (x=Time, y=Kilobits.sum, color=Type), size=0.5) +
ylab("Rate [Kbits/s]")
print(g.root)
png("src/ndnSIM/docs/source/_static/root-rates.png", width=500, height=250)
print(g.root)
retval <- dev.off()
# Copyright (c) 2012,2015  Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# install.packages('ggplot2')
library(ggplot2)
# install.packages('scales')
library(scales)
# install.packages('doBy')
library(doBy)
#########################
# Rate trace processing #
#########################
data = read.table("rate-trace.txt", header=T)
data$Node = factor(data$Node)
data$FaceId <- factor(data$FaceId)
data$Kilobits <- data$Kilobytes * 8
data$Type = factor(data$Type)
# exlude irrelevant types
data = subset(data, Type %in% c("InInterests", "OutInterests", "InData", "OutData"))
# combine stats from all faces
data.combined = summaryBy(. ~ Time + Node + Type, data=data, FUN=sum)
data.root = subset (data.combined, Node == "root")
data.leaves = subset(data.combined, Node %in% c("leaf-1", "leaf-2", "leaf-3", "leaf-4"))
# graph rates on all nodes in Kilobits
g.all <- ggplot(data.combined) +
geom_point(aes (x=Time, y=Kilobits.sum, color=Type), size=1) +
ylab("Rate [Kbits/s]") +
facet_wrap(~ Node)
print(g.all)
# graph rates on the root nodes in Packets
g.root <- ggplot(data.root) +
geom_point(aes (x=Time, y=Kilobits.sum, color=Type), size=2) +
geom_line(aes (x=Time, y=Kilobits.sum, color=Type), size=0.5) +
ylab("Rate [Kbits/s]")
print(g.root)
png("src/ndnSIM/docs/source/_static/root-rates.png", width=500, height=250)
print(g.root)
retval <- dev.off()
runApp("~/R/mini-project_testing")
x<- Arima(data)
x<- tsdisplay(data$Sales)
x<- tsdisplay(diff(data$Sales))
x<- tsdisplay(diff(data$Sales,lag = 2))
x<- tsdisplay(diff(data$Sales,lag = 1))
x<- tsdisplay(diff(data$Sales,lag = 4))
x<- Arima(data$Sales)
x
plot(x)
tsdisplay(x)
tsdisplay(residuals(x))
predict(x,n.ahead = 3)
x
auto.arima(data$Sales)
tsdisplay(residuals(x))
x<-auto.arima(data$Sales)
tsdisplay(residuals(x))
accuracy(residuals(x), data$Sales)
residuals(x)
data<- read.table(file.choose(), header = T)
data<- read.table(file.choose(), header = T, sep = '\t')
x<-auto.arima(data$Sales)
residuals(x)
tsdisplay(residuals(x))
accuracy(residuals(x), data$Sales)
x<-auto.arima(data$Sales,D = 4)
tsdisplay(residuals(x))
accuracy(residuals(x), data$Sales)
x<-arima(data$Sales,D = 4)
library(fpp)
data <- read.table("C:\\Users\\PRATIK GAUTAM\\Desktop\\Sales.txt",header
= T,sep = "\t")
row <- dim(data)[1]
alpha <- .822
beta <- 0.0
NO_PRED <- 6
FORECAST<-0  # first observation is NULL
LEVEL<-data$Sales[1] #L1 = Y1
if(beta==0) {
TREND <- 0
} else {
TREND <-data$Sales[2]-data$Sales[1] #b1 = Y2-Y1
}
counter<-2
error_curr <- 0
error <- 0
error_sq <- 0
error_abs <- 0
error_perc <- 0
while(counter<=row) {
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*1;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("For time:",counter,"actual:",data$Sales[counter],"predicated:",FORECAST[counter],"\n");
error_curr <- data$Sales[counter] - FORECAST[counter];
error <- error + error_curr;
error_sq <- error_sq + error_curr*error_curr;
error_abs <- error_abs + abs(error_curr);
error_perc <- error_perc + (error_curr/data$Sales[counter])*100;
LEVEL_NEW <- alpha*data$Sales[counter]+(1-alpha)*(LEVEL[counter-1]+TREND[counter-1]);
LEVEL<-c(LEVEL, LEVEL_NEW)
TREND_NEW <- beta*(LEVEL[counter]-LEVEL[counter-1])+(1-beta)*TREND[counter-1]
TREND<-c(TREND,TREND_NEW)
counter<-counter+1;
}
# Now predicting
index <- 1
while(index<=NO_PRED){
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*index;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("Predicated value for t=",row+index,":",FORECAST[row+index],"\n");
index <- index+1
}
plot.ts(data$Sales, xlim=c(1,30))
lines(FORECAST,col="blue")
cat("Mean Error :",error/row,"\n");
cat("Mean Absolute Error :",error_abs/row,"\n");
cat("Mean Square Error :",error_sq/row,"\n");
cat("Mean % Error :",error_perc/row,"%\n");
# calculate Theil's U-statistic
counter <- interval+1;
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n");
library(fpp)
data <- read.table("C:\\Users\\PRATIK GAUTAM\\Desktop\\Sales.txt",header
= T,sep = "\t")
row <- dim(data)[1]
alpha <- .822
beta <- 0.0
NO_PRED <- 6
FORECAST<-0  # first observation is NULL
LEVEL<-data$Sales[1] #L1 = Y1
if(beta==0) {
TREND <- 0
} else {
TREND <-data$Sales[2]-data$Sales[1] #b1 = Y2-Y1
}
counter<-2
error_curr <- 0
error <- 0
error_sq <- 0
error_abs <- 0
error_perc <- 0
while(counter<=row) {
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*1;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("For time:",counter,"actual:",data$Sales[counter],"predicated:",FORECAST[counter],"\n");
error_curr <- data$Sales[counter] - FORECAST[counter];
error <- error + error_curr;
error_sq <- error_sq + error_curr*error_curr;
error_abs <- error_abs + abs(error_curr);
error_perc <- error_perc + (error_curr/data$Sales[counter])*100;
LEVEL_NEW <- alpha*data$Sales[counter]+(1-alpha)*(LEVEL[counter-1]+TREND[counter-1]);
LEVEL<-c(LEVEL, LEVEL_NEW)
TREND_NEW <- beta*(LEVEL[counter]-LEVEL[counter-1])+(1-beta)*TREND[counter-1]
TREND<-c(TREND,TREND_NEW)
counter<-counter+1;
}
# Now predicting
index <- 1
while(index<=NO_PRED){
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*index;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("Predicated value for t=",row+index,":",FORECAST[row+index],"\n");
index <- index+1
}
plot.ts(data$Sales, xlim=c(1,30))
lines(FORECAST,col="blue")
cat("Mean Error :",error/row,"\n");
cat("Mean Absolute Error :",error_abs/row,"\n");
cat("Mean Square Error :",error_sq/row,"\n");
cat("Mean % Error :",error_perc/row,"%\n");
# calculate Theil's U-statistic
counter <- interval+1;
cat(counter)
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n");
library(fpp)
data <- read.table("C:\\Users\\PRATIK GAUTAM\\Desktop\\Sales.txt",header
= T,sep = "\t")
row <- dim(data)[1]
alpha <- .822
beta <- 0.0
NO_PRED <- 6
FORECAST<-0  # first observation is NULL
LEVEL<-data$Sales[1] #L1 = Y1
if(beta==0) {
TREND <- 0
} else {
TREND <-data$Sales[2]-data$Sales[1] #b1 = Y2-Y1
}
counter<-2
error_curr <- 0
error <- 0
error_sq <- 0
error_abs <- 0
error_perc <- 0
while(counter<=row) {
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*1;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("For time:",counter,"actual:",data$Sales[counter],"predicated:",FORECAST[counter],"\n");
error_curr <- data$Sales[counter] - FORECAST[counter];
error <- error + error_curr;
error_sq <- error_sq + error_curr*error_curr;
error_abs <- error_abs + abs(error_curr);
error_perc <- error_perc + (error_curr/data$Sales[counter])*100;
LEVEL_NEW <- alpha*data$Sales[counter]+(1-alpha)*(LEVEL[counter-1]+TREND[counter-1]);
LEVEL<-c(LEVEL, LEVEL_NEW)
TREND_NEW <- beta*(LEVEL[counter]-LEVEL[counter-1])+(1-beta)*TREND[counter-1]
TREND<-c(TREND,TREND_NEW)
counter<-counter+1;
}
# Now predicting
index <- 1
while(index<=NO_PRED){
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*index;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("Predicated value for t=",row+index,":",FORECAST[row+index],"\n");
index <- index+1
}
plot.ts(data$Sales, xlim=c(1,30))
lines(FORECAST,col="blue")
cat("Mean Error :",error/row,"\n");
cat("Mean Absolute Error :",error_abs/row,"\n");
cat("Mean Square Error :",error_sq/row,"\n");
cat("Mean % Error :",error_perc/row,"%\n");
# calculate Theil's U-statistic
counter <- interval+1;
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n");
library(fpp)
data <- read.table("C:\\Users\\PRATIK GAUTAM\\Desktop\\Sales.txt",header
= T,sep = "\t")
row <- dim(data)[1]
alpha <- .822
beta <- 0.0
NO_PRED <- 6
FORECAST<-0  # first observation is NULL
LEVEL<-data$Sales[1] #L1 = Y1
if(beta==0) {
TREND <- 0
} else {
TREND <-data$Sales[2]-data$Sales[1] #b1 = Y2-Y1
}
counter<-2
error_curr <- 0
error <- 0
error_sq <- 0
error_abs <- 0
error_perc <- 0
while(counter<=row) {
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*1;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("For time:",counter,"actual:",data$Sales[counter],"predicated:",FORECAST[counter],"\n");
error_curr <- data$Sales[counter] - FORECAST[counter];
error <- error + error_curr;
error_sq <- error_sq + error_curr*error_curr;
error_abs <- error_abs + abs(error_curr);
error_perc <- error_perc + (error_curr/data$Sales[counter])*100;
LEVEL_NEW <- alpha*data$Sales[counter]+(1-alpha)*(LEVEL[counter-1]+TREND[counter-1]);
LEVEL<-c(LEVEL, LEVEL_NEW)
TREND_NEW <- beta*(LEVEL[counter]-LEVEL[counter-1])+(1-beta)*TREND[counter-1]
TREND<-c(TREND,TREND_NEW)
counter<-counter+1;
}
# Now predicting
index <- 1
while(index<=NO_PRED){
FORECAST_NEXT<-LEVEL[counter-1]+TREND[counter-1]*index;
FORECAST <- c(FORECAST,FORECAST_NEXT);
cat("Predicated value for t=",row+index,":",FORECAST[row+index],"\n");
index <- index+1
}
plot.ts(data$Sales, xlim=c(1,30))
lines(FORECAST,col="blue")
cat("Mean Error :",error/row,"\n");
cat("Mean Absolute Error :",error_abs/row,"\n");
cat("Mean Square Error :",error_sq/row,"\n");
cat("Mean % Error :",error_perc/row,"%\n");
# calculate Theil's U-statistic
counter <- interval+1;
num <- 0;
denom <- 0;
while(counter<row) {
num <- num + ((FORECAST[counter+1]-data$Sales[counter+1])/data$Sales[counter])**2;
denom <- denom + ((data$Sales[counter+1]-data$Sales[counter])/data$Sales[counter])**2;
counter <- counter +1
}
cat("Theil's U-statistic : ", sqrt(num/denom),"\n")
library(shiny)
runApp("~/R/mini-project_testing/")
